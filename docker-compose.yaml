version: "3"  

# Persistent storage 
volumes:
  prometheus_data: {}
  grafana_data: {}
  rancher_data: {}
  loki_data: {}
  promtail_data: {}

# Bridge network
networks:
  monitoring:
    driver: bridge

services:
  ## Prometheus Service
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: always
    ports:
      - 9090:9090
    networks:
      - monitoring
    volumes:
      - ./prometheus/prometheus.yaml:/etc/prometheus/prometheus.yaml
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yaml"  # Explicitly specify config file
      - "--storage.tsdb.path=/prometheus"                # Path to store data
      - "--web.enable-lifecycle"                         # Enable HTTP-based reload triggers
    healthcheck:  # Add a health check to ensure the service is running
      test: ["CMD-SHELL", "wget -q --spider http://localhost:9090/-/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  ## Grafana Service
  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: always
    ports:
      - 3000:3000
    networks:
      - monitoring
    volumes:
      - grafana_data:/var/lib/grafana
    env_file: # creds file
      - ./grafana/grafana.config
    depends_on:
      - prometheus
    healthcheck:  # Health check to ensure Grafana is ready
      test: ["CMD-SHELL", "wget -q --spider http://localhost:3000/login || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

## Loki Service
  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml    
    networks:
      - monitoring

## Loki Service
  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    volumes:
      - /var/log:/var/log:ro
      - ./promtail/promtail-config.yaml:/etc/promtail/promtail-config.yaml
    command: -config.file=/etc/promtail/promtail-config.yaml
    networks:
      - monitoring


## Traefik Service
  traefik:
    image: traefik:v2.11
    container_name: traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencrypt.acme.email=hassan@oulcaid.com"
      - "--certificatesresolvers.letsencrypt.acme.storage=/acme.json"
      - "--api.dashboard=true"
      - "--entrypoints.traefik.address=:8080"
    ports:
      - "8080:8080"
    volumes:
      - "./traefik/traefik.yml:/traefik.yml:ro"
      - "./traefik/acme.json:/acme.json"
      - "/var/run/docker.sock:/var/run/docker.sock"
    restart: always
    networks:
      - monitoring
      - default 


## Rancher service
  rancher:
    image: rancher/rancher:latest
    restart: unless-stopped
    container_name: rancher
    expose:
      - "80"
      - "443"
    volumes:
      - ./rancher/rancher:/var/lib/rancher
    privileged: true
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.rancher.rule=Host(`rancher.oulcaid.com`)"
      - "traefik.http.routers.rancher.entrypoints=websecure"
      - "traefik.http.routers.rancher.tls.certresolver=letsencrypt"
      - "traefik.http.services.rancher.loadbalancer.server.port=443"
    networks:
      - monitoring
      - default 